{"version":3,"file":"lib_imagecanvas_js.b9eb8937f62809e6f49d.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,wBAAwB;AAClD,eAAe,mBAAO,CAAC,yFAAuB;AAC9C,mBAAmB,mBAAO,CAAC,qCAAY;AACvC,sBAAsB,mBAAO,CAAC,2CAAe;AAC7C,kBAAkB,mBAAO,CAAC,mCAAW;AACrC;AACA;AACA,6CAA6C,uBAAuB,sSAAsS;AAC1W;AACA;AACA,wBAAwB;AACxB,6DAA6D,wCAAwC,SAAS,0FAA0F;AACxM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS,cAAc;AACzD;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA,sDAAsD,cAAc,MAAM;AAC1E;AACA;AACA,mEAAmE,cAAc,MAAM;AACvF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qDAAqD,cAAc,UAAU;AAC7E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;;;;;;;;;AChRa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,sBAAsB,GAAG,wBAAwB;AACxE;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB;AACA,2CAA2C,mBAAmB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,YAAY,SAAS;AACrB;AACA,2CAA2C,mBAAmB;AAC9D;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;;;;;;;;;AC7Ca;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,yBAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uBAAuB;AACvB;;;;;;;;;;AChBa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,sBAAsB;AAC5C;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,mBAAmB;AACnB","sources":["webpack://ibb/./lib/imagecanvas.js","webpack://ibb/./lib/polygons.js","webpack://ibb/./lib/serializers.js","webpack://ibb/./lib/version.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 0phoff\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImageCanvasView = exports.ImageCanvasModel = void 0;\nconst base_1 = require(\"@jupyter-widgets/base\");\nconst polygons_1 = require(\"./polygons\");\nconst serializers_1 = require(\"./serializers\");\nconst version_1 = require(\"./version\");\nclass ImageCanvasModel extends base_1.DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: ImageCanvasModel.model_name, _model_module: ImageCanvasModel.model_module, _model_module_version: ImageCanvasModel.model_module_version, _view_name: ImageCanvasModel.view_name, _view_module: ImageCanvasModel.view_module, _view_module_version: ImageCanvasModel.view_module_version });\n    }\n}\nexports.ImageCanvasModel = ImageCanvasModel;\nImageCanvasModel.serializers = Object.assign(Object.assign({}, base_1.DOMWidgetModel.serializers), { image: { serialize: serializers_1.serialize_numpy, deserialize: serializers_1.deserialize_numpy } });\nImageCanvasModel.model_name = 'ImageCanvasModel';\nImageCanvasModel.model_module = version_1.MODULE_NAME;\nImageCanvasModel.model_module_version = version_1.MODULE_VERSION;\nImageCanvasModel.view_name = 'ImageCanvasView';\nImageCanvasModel.view_module = version_1.MODULE_NAME;\nImageCanvasModel.view_module_version = version_1.MODULE_VERSION;\nclass ImageCanvasView extends base_1.DOMWidgetView {\n    render() {\n        // Constants\n        this.POLY = this.model.get('enable_poly');\n        this.ENLARGE = this.model.get('enlarge');\n        this.COLOR = this.model.get('color');\n        this.ALPHA = this.model.get('alpha');\n        this.SIZE = this.model.get('size');\n        this.HOVER = this.model.get('hover_style');\n        this.CLICK = this.model.get('click_style');\n        // PY -> JS\n        this.model.on('change:width', this.render_children, this);\n        this.model.on('change:height', this.render_children, this);\n        this.model.on('change:image', this.draw_image, this);\n        this.model.on('change:save', this.save, this);\n        if (this.POLY) {\n            this.model.on('change:polygons', this.draw_polygons, this);\n            if (this.HOVER != null)\n                this.model.on('change:hovered', this.draw_fx, this);\n            if (this.CLICK != null)\n                this.model.on('change:clicked', this.draw_fx, this);\n        }\n        // Start\n        this.render_children();\n    }\n    render_children() {\n        // Constants\n        this.width = this.model.get('width') - 2;\n        this.height = this.model.get('height') - 2;\n        // Create elements\n        this.bg = document.createElement('canvas');\n        this.bg.width = this.width;\n        this.bg.height = this.height;\n        this.bg.style.border = '1px solid lightgray';\n        this.result = document.createElement('canvas');\n        this.result.width = this.width;\n        this.result.height = this.height;\n        if (this.POLY) {\n            this.fg = document.createElement('canvas');\n            this.fg.width = this.width;\n            this.fg.height = this.height;\n            this.fg.style.position = 'absolute';\n            this.fg.style.top = '0px';\n            this.fg.style.left = '0px';\n            this.fg.style.right = '0px';\n            this.fg.style.marginLeft = 'auto';\n            this.fg.style.marginRight = 'auto';\n            this.fx = document.createElement('canvas');\n            this.fx.width = this.width;\n            this.fx.height = this.height;\n            this.fx.style.position = 'absolute';\n            this.fx.style.top = '0px';\n            this.fx.style.left = '0px';\n            this.fx.style.right = '0px';\n            this.fx.style.marginLeft = 'auto';\n            this.fx.style.marginRight = 'auto';\n        }\n        // Add to DOM\n        var div = document.createElement('div');\n        div.style.textAlign = 'center';\n        div.style.minWidth = this.width + 'px';\n        div.style.minHeight = this.height + 'px';\n        div.appendChild(this.bg);\n        if (this.POLY) {\n            div.appendChild(this.fg);\n            div.appendChild(this.fx);\n        }\n        while (this.el.firstChild)\n            this.el.firstChild.remove();\n        this.el.appendChild(div);\n        this.draw_image();\n        if (this.POLY) {\n            this.draw_polygons();\n            this.draw_fx();\n            this.fx.onclick = this.onclick.bind(this);\n            this.fx.onmousemove = this.onhover.bind(this);\n            this.fx.onmouseleave = () => {\n                this.model.set('hovered', null);\n                this.touch();\n            };\n        }\n    }\n    draw_image() {\n        var img = this.model.get('image'), bgctx = this.bg.getContext('2d');\n        if (!bgctx) {\n            return;\n        }\n        bgctx.clearRect(0, 0, this.bg.width, this.bg.height);\n        this.scale = 1;\n        this.offset_x = 0;\n        this.offset_y = 0;\n        if (img) {\n            var imgd = new ImageData(img.data, img.shape[1], img.shape[0]);\n            if (!this.ENLARGE && img.shape[1] <= this.width && img.shape[0] <= this.height) {\n                this.offset_x = Math.floor((this.width - img.shape[1]) / 2);\n                this.offset_y = Math.floor((this.height - img.shape[0]) / 2);\n                bgctx.putImageData(imgd, this.offset_x, this.offset_y);\n            }\n            else {\n                var oc = document.createElement('canvas'), octx = oc.getContext('2d');\n                if (!octx) {\n                    return;\n                }\n                // Compute scale and offset\n                this.scale = Math.min(this.width / img.shape[1], this.height / img.shape[0]);\n                var scaled_w = img.shape[1] * this.scale, scaled_h = img.shape[0] * this.scale;\n                this.offset_x = Math.floor((this.width - scaled_w) / 2);\n                this.offset_y = Math.floor((this.height - scaled_h) / 2);\n                // Draw original image\n                oc.width = img.shape[1];\n                oc.height = img.shape[0];\n                octx.putImageData(imgd, 0, 0);\n                // Draw rescaled image\n                bgctx.drawImage(oc, 0, 0, img.shape[1], img.shape[0], this.offset_x, this.offset_y, scaled_w, scaled_h);\n            }\n        }\n    }\n    draw_polygons() {\n        this.poly = this.model.get('polygons');\n        var fgctx = this.fg.getContext('2d');\n        if (!fgctx) {\n            return;\n        }\n        fgctx.clearRect(0, 0, this.fg.width, this.fg.height);\n        if (this.poly)\n            this.poly.forEach(poly => { this._draw_poly(fgctx, poly); });\n    }\n    draw_fx() {\n        var hover_idx = this.model.get('hovered'), click_idx = this.model.get('clicked'), fxctx = this.fx.getContext('2d');\n        if (!fxctx) {\n            return;\n        }\n        fxctx.clearRect(0, 0, this.fx.width, this.fx.height);\n        if (this.poly) {\n            if (hover_idx != null && hover_idx < this.poly.length) {\n                this._draw_poly(fxctx, this.poly[hover_idx], this.HOVER);\n            }\n            if (click_idx != null && click_idx < this.poly.length) {\n                this._draw_poly(fxctx, this.poly[click_idx], this.CLICK);\n            }\n        }\n    }\n    save() {\n        var save_val = this.model.get('save');\n        if (save_val) {\n            var ctx = this.result.getContext('2d');\n            if (!ctx) {\n                return;\n            }\n            // Clear result canvas\n            ctx.clearRect(0, 0, this.width, this.height);\n            // Draw canvases\n            ctx.drawImage(this.bg, 0, 0, this.width, this.height);\n            if (this.POLY) {\n                ctx.drawImage(this.fg, 0, 0, this.width, this.height);\n                ctx.drawImage(this.fx, 0, 0, this.width, this.height);\n            }\n            // Open in new tab\n            var data = this.result.toDataURL('png');\n            var w = window.open('about:blank');\n            setTimeout(function () {\n                if (w) {\n                    w.document.body.appendChild(w.document.createElement('img')).src = data;\n                }\n            }, 0);\n            // Reset save\n            setTimeout(() => {\n                this.model.set('save', false);\n                this.model.save_changes();\n            }, 0);\n        }\n    }\n    onclick(e) {\n        var [x, y] = this._get_image_coord(e.clientX, e.clientY);\n        this.model.set('clicked', this._get_closest_poly(x, y));\n        this.touch();\n    }\n    onhover(e) {\n        var [x, y] = this._get_image_coord(e.clientX, e.clientY);\n        this.model.set('hovered', this._get_closest_poly(x, y));\n        this.touch();\n    }\n    _draw_poly(ctx, poly, style) {\n        const coords = poly.coords.map(([x, y]) => [\n            this.offset_x + (x * this.scale),\n            this.offset_y + (y * this.scale)\n        ]);\n        // Draw\n        ctx.beginPath();\n        ctx.moveTo(coords[0][0], coords[0][1]);\n        for (const [x, y] of coords.slice(1)) {\n            ctx.lineTo(x, y);\n        }\n        ctx.closePath();\n        // Styles\n        if (style) {\n            ctx.strokeStyle = style.color || poly.color || this.COLOR;\n            ctx.lineWidth = style.size || poly.size || this.SIZE;\n            ctx.fillStyle = ctx.strokeStyle + (style.alpha || poly.alpha || this.ALPHA);\n        }\n        else {\n            ctx.strokeStyle = poly.color || this.COLOR;\n            ctx.lineWidth = poly.size || this.SIZE;\n            ctx.fillStyle = ctx.strokeStyle + (poly.alpha || this.ALPHA);\n        }\n        ctx.stroke();\n        ctx.fill();\n    }\n    _get_image_coord(x, y) {\n        var r = this.fx.getBoundingClientRect();\n        x -= r.left + this.offset_x;\n        y -= r.top + this.offset_y;\n        x /= this.scale;\n        y /= this.scale;\n        return [x, y];\n    }\n    _get_closest_poly(x, y) {\n        if (this.poly === null || this.poly.length === 0)\n            return null;\n        var candidate = (this.poly\n            // Remember original index\n            .map((poly, idx) => { return { idx, poly }; })\n            // Filter boxes based on mouse position\n            .filter(({ poly }) => polygons_1.inside_polygon([x, y], poly))\n            // Reduce to find smallest box\n            .reduce((smallest, current) => {\n            const area = polygons_1.area_polygon(current.poly);\n            if ((smallest.length === 0) || (area < smallest[0].area)) {\n                return [Object.assign(Object.assign({}, current), { area })];\n            }\n            else if (area === smallest[0].area) {\n                return [...smallest, Object.assign(Object.assign({}, current), { area })];\n            }\n            return smallest;\n        }, [])\n            // Reduce to position closest to center\n            .reduce((closest, current) => {\n            const [cx, cy] = polygons_1.centroid_polygon(current.poly);\n            const distance = Math.sqrt(Math.pow(x - cx, 2) + Math.pow(y - cy, 2));\n            if ((closest === null) || (distance < closest.distance)) {\n                return Object.assign(Object.assign({}, current), { distance });\n            }\n            return closest;\n        }, null));\n        if (candidate === null)\n            return null;\n        return candidate.idx;\n    }\n}\nexports.ImageCanvasView = ImageCanvasView;\n//# sourceMappingURL=imagecanvas.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.area_polygon = exports.inside_polygon = exports.centroid_polygon = void 0;\nfunction centroid_polygon(polygon) {\n    const centroid = [0, 0];\n    const { coords } = polygon;\n    for (const [x, y] of coords) {\n        centroid[0] += x;\n        centroid[1] += y;\n    }\n    centroid[0] /= coords.length;\n    centroid[1] /= coords.length;\n    return centroid;\n}\nexports.centroid_polygon = centroid_polygon;\n;\nfunction inside_polygon(point, polygon) {\n    // ray-casting algorithm based on\n    // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html/pnpoly.html\n    const x = point[0], y = point[1];\n    const { coords } = polygon;\n    var inside = false;\n    for (let i = 0, j = coords.length - 1; i < coords.length; j = i++) {\n        const xi = coords[i][0], yi = coords[i][1];\n        const xj = coords[j][0], yj = coords[j][1];\n        const intersect = ((yi > y) != (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n}\nexports.inside_polygon = inside_polygon;\n;\nfunction area_polygon(polygon) {\n    const { coords } = polygon;\n    let area = 0;\n    for (let i = 0, j = coords.length - 1; i < coords.length; i++) {\n        area += (coords[j][0] + coords[i][0]) * Math.abs(coords[j][1] - coords[i][1]);\n        j = i;\n    }\n    return Math.abs(area / 2);\n}\nexports.area_polygon = area_polygon;\n;\n//# sourceMappingURL=polygons.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serialize_numpy = exports.deserialize_numpy = void 0;\nfunction deserialize_numpy(data) {\n    if (data == null)\n        return null;\n    return {\n        data: new Uint8ClampedArray(data.data.buffer),\n        shape: data.shape,\n    };\n}\nexports.deserialize_numpy = deserialize_numpy;\nfunction serialize_numpy(data) {\n    return data;\n}\nexports.serialize_numpy = serialize_numpy;\n//# sourceMappingURL=serializers.js.map","\"use strict\";\n// Copyright (c) 0phoff\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MODULE_NAME = exports.MODULE_VERSION = void 0;\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexports.MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexports.MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map"],"names":[],"sourceRoot":""}